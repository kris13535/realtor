{"ast":null,"code":"'use strict'; // Implements Brad Hill's Double HMAC pattern from\n// https://www.nccgroup.trust/us/about-us/newsroom-and-events/blog/2011/february/double-hmac-verification/.\n// The approach is similar to the node's native implementation of timing safe buffer comparison that will be available on v6+.\n// https://github.com/nodejs/node/issues/3043\n// https://github.com/nodejs/node/pull/3073\n\nvar crypto = require('crypto');\n\nfunction bufferEqual(a, b) {\n  if (a.length !== b.length) {\n    return false;\n  } // `crypto.timingSafeEqual` was introduced in Node v6.6.0\n  // <https://github.com/jshttp/basic-auth/issues/39>\n\n\n  if (crypto.timingSafeEqual) {\n    return crypto.timingSafeEqual(a, b);\n  }\n\n  for (var i = 0; i < a.length; i++) {\n    if (a[i] !== b[i]) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nfunction timeSafeCompare(a, b) {\n  var sa = String(a);\n  var sb = String(b);\n  var key = crypto.pseudoRandomBytes(32);\n  var ah = crypto.createHmac('sha256', key).update(sa).digest();\n  var bh = crypto.createHmac('sha256', key).update(sb).digest();\n  return bufferEqual(ah, bh) && a === b;\n}\n\nmodule.exports = timeSafeCompare;","map":null,"metadata":{},"sourceType":"script"}